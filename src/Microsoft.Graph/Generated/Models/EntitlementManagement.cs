// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Models
{
    #pragma warning disable CS1591
    public class EntitlementManagement : Microsoft.Graph.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Approval stages for decisions associated with access package assignment requests.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Models.Approval>? AccessPackageAssignmentApprovals
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Models.Approval>?>("accessPackageAssignmentApprovals"); }
            set { BackingStore?.Set("accessPackageAssignmentApprovals", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Models.Approval> AccessPackageAssignmentApprovals
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Models.Approval>>("accessPackageAssignmentApprovals"); }
            set { BackingStore?.Set("accessPackageAssignmentApprovals", value); }
        }
#endif
        /// <summary>Access packages define the collection of resource roles and the policies for which subjects can request or be assigned access to those resources.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Models.AccessPackage>? AccessPackages
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Models.AccessPackage>?>("accessPackages"); }
            set { BackingStore?.Set("accessPackages", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Models.AccessPackage> AccessPackages
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Models.AccessPackage>>("accessPackages"); }
            set { BackingStore?.Set("accessPackages", value); }
        }
#endif
        /// <summary>Access package assignment policies govern which subjects can request or be assigned an access package via an access package assignment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Models.AccessPackageAssignmentPolicy>? AssignmentPolicies
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Models.AccessPackageAssignmentPolicy>?>("assignmentPolicies"); }
            set { BackingStore?.Set("assignmentPolicies", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Models.AccessPackageAssignmentPolicy> AssignmentPolicies
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Models.AccessPackageAssignmentPolicy>>("assignmentPolicies"); }
            set { BackingStore?.Set("assignmentPolicies", value); }
        }
#endif
        /// <summary>Access package assignment requests created by or on behalf of a subject.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Models.AccessPackageAssignmentRequest>? AssignmentRequests
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Models.AccessPackageAssignmentRequest>?>("assignmentRequests"); }
            set { BackingStore?.Set("assignmentRequests", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Models.AccessPackageAssignmentRequest> AssignmentRequests
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Models.AccessPackageAssignmentRequest>>("assignmentRequests"); }
            set { BackingStore?.Set("assignmentRequests", value); }
        }
#endif
        /// <summary>The assignment of an access package to a subject for a period of time.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Models.AccessPackageAssignment>? Assignments
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Models.AccessPackageAssignment>?>("assignments"); }
            set { BackingStore?.Set("assignments", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Models.AccessPackageAssignment> Assignments
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Models.AccessPackageAssignment>>("assignments"); }
            set { BackingStore?.Set("assignments", value); }
        }
#endif
        /// <summary>A container for access packages.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Models.AccessPackageCatalog>? Catalogs
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Models.AccessPackageCatalog>?>("catalogs"); }
            set { BackingStore?.Set("catalogs", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Models.AccessPackageCatalog> Catalogs
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Models.AccessPackageCatalog>>("catalogs"); }
            set { BackingStore?.Set("catalogs", value); }
        }
#endif
        /// <summary>References to a directory or domain of another organization whose users can request access.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Models.ConnectedOrganization>? ConnectedOrganizations
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Models.ConnectedOrganization>?>("connectedOrganizations"); }
            set { BackingStore?.Set("connectedOrganizations", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Models.ConnectedOrganization> ConnectedOrganizations
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Models.ConnectedOrganization>>("connectedOrganizations"); }
            set { BackingStore?.Set("connectedOrganizations", value); }
        }
#endif
        /// <summary>A reference to the geolocation environments in which a resource is located.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Models.AccessPackageResourceEnvironment>? ResourceEnvironments
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Models.AccessPackageResourceEnvironment>?>("resourceEnvironments"); }
            set { BackingStore?.Set("resourceEnvironments", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Models.AccessPackageResourceEnvironment> ResourceEnvironments
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Models.AccessPackageResourceEnvironment>>("resourceEnvironments"); }
            set { BackingStore?.Set("resourceEnvironments", value); }
        }
#endif
        /// <summary>Represents a request to add or remove a resource to or from a catalog respectively.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Models.AccessPackageResourceRequest>? ResourceRequests
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Models.AccessPackageResourceRequest>?>("resourceRequests"); }
            set { BackingStore?.Set("resourceRequests", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Models.AccessPackageResourceRequest> ResourceRequests
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Models.AccessPackageResourceRequest>>("resourceRequests"); }
            set { BackingStore?.Set("resourceRequests", value); }
        }
#endif
        /// <summary>The resourceRoleScopes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Models.AccessPackageResourceRoleScope>? ResourceRoleScopes
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Models.AccessPackageResourceRoleScope>?>("resourceRoleScopes"); }
            set { BackingStore?.Set("resourceRoleScopes", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Models.AccessPackageResourceRoleScope> ResourceRoleScopes
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Models.AccessPackageResourceRoleScope>>("resourceRoleScopes"); }
            set { BackingStore?.Set("resourceRoleScopes", value); }
        }
#endif
        /// <summary>The resources associated with the catalogs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Microsoft.Graph.Models.AccessPackageResource>? Resources
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Models.AccessPackageResource>?>("resources"); }
            set { BackingStore?.Set("resources", value); }
        }
#nullable restore
#else
        public List<Microsoft.Graph.Models.AccessPackageResource> Resources
        {
            get { return BackingStore?.Get<List<Microsoft.Graph.Models.AccessPackageResource>>("resources"); }
            set { BackingStore?.Set("resources", value); }
        }
#endif
        /// <summary>The settings that control the behavior of Microsoft Entra entitlement management.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Models.EntitlementManagementSettings? Settings
        {
            get { return BackingStore?.Get<Microsoft.Graph.Models.EntitlementManagementSettings?>("settings"); }
            set { BackingStore?.Set("settings", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Models.EntitlementManagementSettings Settings
        {
            get { return BackingStore?.Get<Microsoft.Graph.Models.EntitlementManagementSettings>("settings"); }
            set { BackingStore?.Set("settings", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Microsoft.Graph.Models.EntitlementManagement"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new Microsoft.Graph.Models.EntitlementManagement CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Microsoft.Graph.Models.EntitlementManagement();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "accessPackageAssignmentApprovals", n => { AccessPackageAssignmentApprovals = n.GetCollectionOfObjectValues<Microsoft.Graph.Models.Approval>(Microsoft.Graph.Models.Approval.CreateFromDiscriminatorValue)?.ToList(); } },
                { "accessPackages", n => { AccessPackages = n.GetCollectionOfObjectValues<Microsoft.Graph.Models.AccessPackage>(Microsoft.Graph.Models.AccessPackage.CreateFromDiscriminatorValue)?.ToList(); } },
                { "assignmentPolicies", n => { AssignmentPolicies = n.GetCollectionOfObjectValues<Microsoft.Graph.Models.AccessPackageAssignmentPolicy>(Microsoft.Graph.Models.AccessPackageAssignmentPolicy.CreateFromDiscriminatorValue)?.ToList(); } },
                { "assignmentRequests", n => { AssignmentRequests = n.GetCollectionOfObjectValues<Microsoft.Graph.Models.AccessPackageAssignmentRequest>(Microsoft.Graph.Models.AccessPackageAssignmentRequest.CreateFromDiscriminatorValue)?.ToList(); } },
                { "assignments", n => { Assignments = n.GetCollectionOfObjectValues<Microsoft.Graph.Models.AccessPackageAssignment>(Microsoft.Graph.Models.AccessPackageAssignment.CreateFromDiscriminatorValue)?.ToList(); } },
                { "catalogs", n => { Catalogs = n.GetCollectionOfObjectValues<Microsoft.Graph.Models.AccessPackageCatalog>(Microsoft.Graph.Models.AccessPackageCatalog.CreateFromDiscriminatorValue)?.ToList(); } },
                { "connectedOrganizations", n => { ConnectedOrganizations = n.GetCollectionOfObjectValues<Microsoft.Graph.Models.ConnectedOrganization>(Microsoft.Graph.Models.ConnectedOrganization.CreateFromDiscriminatorValue)?.ToList(); } },
                { "resourceEnvironments", n => { ResourceEnvironments = n.GetCollectionOfObjectValues<Microsoft.Graph.Models.AccessPackageResourceEnvironment>(Microsoft.Graph.Models.AccessPackageResourceEnvironment.CreateFromDiscriminatorValue)?.ToList(); } },
                { "resourceRequests", n => { ResourceRequests = n.GetCollectionOfObjectValues<Microsoft.Graph.Models.AccessPackageResourceRequest>(Microsoft.Graph.Models.AccessPackageResourceRequest.CreateFromDiscriminatorValue)?.ToList(); } },
                { "resourceRoleScopes", n => { ResourceRoleScopes = n.GetCollectionOfObjectValues<Microsoft.Graph.Models.AccessPackageResourceRoleScope>(Microsoft.Graph.Models.AccessPackageResourceRoleScope.CreateFromDiscriminatorValue)?.ToList(); } },
                { "resources", n => { Resources = n.GetCollectionOfObjectValues<Microsoft.Graph.Models.AccessPackageResource>(Microsoft.Graph.Models.AccessPackageResource.CreateFromDiscriminatorValue)?.ToList(); } },
                { "settings", n => { Settings = n.GetObjectValue<Microsoft.Graph.Models.EntitlementManagementSettings>(Microsoft.Graph.Models.EntitlementManagementSettings.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Models.Approval>("accessPackageAssignmentApprovals", AccessPackageAssignmentApprovals);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Models.AccessPackage>("accessPackages", AccessPackages);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Models.AccessPackageAssignmentPolicy>("assignmentPolicies", AssignmentPolicies);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Models.AccessPackageAssignmentRequest>("assignmentRequests", AssignmentRequests);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Models.AccessPackageAssignment>("assignments", Assignments);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Models.AccessPackageCatalog>("catalogs", Catalogs);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Models.ConnectedOrganization>("connectedOrganizations", ConnectedOrganizations);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Models.AccessPackageResourceEnvironment>("resourceEnvironments", ResourceEnvironments);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Models.AccessPackageResourceRequest>("resourceRequests", ResourceRequests);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Models.AccessPackageResourceRoleScope>("resourceRoleScopes", ResourceRoleScopes);
            writer.WriteCollectionOfObjectValues<Microsoft.Graph.Models.AccessPackageResource>("resources", Resources);
            writer.WriteObjectValue<Microsoft.Graph.Models.EntitlementManagementSettings>("settings", Settings);
        }
    }
}
