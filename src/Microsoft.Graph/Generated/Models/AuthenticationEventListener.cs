// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Microsoft.Graph.Models
{
    #pragma warning disable CS1591
    public class AuthenticationEventListener : Microsoft.Graph.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Indicates the authenticationEventListener is associated with an authenticationEventsFlow. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AuthenticationEventsFlowId
        {
            get { return BackingStore?.Get<string?>("authenticationEventsFlowId"); }
            set { BackingStore?.Set("authenticationEventsFlowId", value); }
        }
#nullable restore
#else
        public string AuthenticationEventsFlowId
        {
            get { return BackingStore?.Get<string>("authenticationEventsFlowId"); }
            set { BackingStore?.Set("authenticationEventsFlowId", value); }
        }
#endif
        /// <summary>The conditions on which this authenticationEventListener should trigger.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Microsoft.Graph.Models.AuthenticationConditions? Conditions
        {
            get { return BackingStore?.Get<Microsoft.Graph.Models.AuthenticationConditions?>("conditions"); }
            set { BackingStore?.Set("conditions", value); }
        }
#nullable restore
#else
        public Microsoft.Graph.Models.AuthenticationConditions Conditions
        {
            get { return BackingStore?.Get<Microsoft.Graph.Models.AuthenticationConditions>("conditions"); }
            set { BackingStore?.Set("conditions", value); }
        }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Microsoft.Graph.Models.AuthenticationEventListener"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new Microsoft.Graph.Models.AuthenticationEventListener CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("@odata.type")?.GetStringValue();
            return mappingValue switch
            {
                "#microsoft.graph.onAttributeCollectionListener" => new Microsoft.Graph.Models.OnAttributeCollectionListener(),
                "#microsoft.graph.onAuthenticationMethodLoadStartListener" => new Microsoft.Graph.Models.OnAuthenticationMethodLoadStartListener(),
                "#microsoft.graph.onInteractiveAuthFlowStartListener" => new Microsoft.Graph.Models.OnInteractiveAuthFlowStartListener(),
                "#microsoft.graph.onTokenIssuanceStartListener" => new Microsoft.Graph.Models.OnTokenIssuanceStartListener(),
                "#microsoft.graph.onUserCreateStartListener" => new Microsoft.Graph.Models.OnUserCreateStartListener(),
                _ => new Microsoft.Graph.Models.AuthenticationEventListener(),
            };
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "authenticationEventsFlowId", n => { AuthenticationEventsFlowId = n.GetStringValue(); } },
                { "conditions", n => { Conditions = n.GetObjectValue<Microsoft.Graph.Models.AuthenticationConditions>(Microsoft.Graph.Models.AuthenticationConditions.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("authenticationEventsFlowId", AuthenticationEventsFlowId);
            writer.WriteObjectValue<Microsoft.Graph.Models.AuthenticationConditions>("conditions", Conditions);
        }
    }
}
